#! /usr/bin/env

'''
	Get a list of files generated by phot and plot x,y coordinates of all
	sources.
'''

import sys, os
import numpy as np
import pylab as py
from astropy.table import Table
import logging
from pyraf import iraf

iraf.noao(_doprint=0)
iraf.imred(_doprint=0)
iraf.apphot(_doprint=0)

################################################################################

def main(argv):
    logging.basicConfig(format='%(levelname)s:%(asctime)s::%(message)s',
                        level=logging.DEBUG)

    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option('-f', '--filename',
                      help='List of files to process. This is a two column table, 1st column is fits image and 2nd \
                      phot catalog',
                      type=str)
    parser.add_option('-i', '--index',
                      help='Index of source to be analysed.',type=int)
    parser.add_option('-o', '--output',
                      help='Output file name.',type=str)

    parser.add_option('-v', '--verbose',
                      help='Run in verbose mode.', action='store_true',
                      default=False)
    opt, args = parser.parse_args(argv)

    flist = Table.read(opt.filename, format='ascii.no_header')
    tabxy = '/tmp/tabxy.txt'
    tmp_rprof = '/tmp/track-psf-%04i.txt'

    dtype= [('filename','|%iS'%len(flist['col1'][0])),
                             ('xcenter',np.float),
                             ('ycenter',np.float),
                             ('msky',np.float),
                             ('psf',np.float),
                             ('mag',np.float),
                             ('iers','|5S')]
    rpd = np.zeros(len(flist),
                   dtype=dtype)

    for i in range(len(flist)):
        cat = Table.read(flist['col2'][i],format='ascii.daophot')
        logging.debug('Processing image %s. Source @ %.2f x %.2f  ...' %(flist['col1'][i],
                                                                         cat['XCENTER'][opt.index],
                                                                         cat['YCENTER'][opt.index]))
        fp = open('/tmp/tabxy.txt','w')
        fp.write('%.2f %.2f'%(cat['XCENTER'][opt.index],
                              cat['YCENTER'][opt.index]))
        fp.close()
        iraf.radprof(flist['col1'][i],
                     radius=8,
                     step=1.0,
                     coords=tabxy,
                     output="",
                     interactive='no',verify='no',verbose='yes',Stdout=tmp_rprof%(i+1))

        try:
            tmp_rdp = np.loadtxt(tmp_rprof%(i+1),
                                 dtype=dtype)
        except ValueError:
            continue
        # print tmp_rdp
        rpd[i] = tmp_rdp

    np.save(opt.output,rpd)

    return 0

################################################################################

if __name__ == '__main__':
    main(sys.argv)

    ################################################################################