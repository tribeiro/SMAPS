#! /usr/bin/env

'''
	Get a list of files generated by phot and plot x,y coordinates of all 
	sources.
'''

import sys,os
import numpy as np
import pylab as py
from astropy.table import Table
from astropy.io import fits as pyfits
import logging

################################################################################

def main(argv):

	logging.basicConfig(format='%(levelname)s:%(asctime)s::%(message)s',
						level=logging.DEBUG)
	
	from optparse import OptionParser
	
	parser = OptionParser()
	
	parser.add_option('-o','--output',
					  help = 'Output file.'
					  ,type='string')
	parser.add_option('-v','--verbose',
					help = 'Run in verbose mode.',action='store_true',
					default=False)
	opt,args = parser.parse_args(argv)

	# Reads WCS information
	path = '/Volumes/TiagoSD/Documents/T80/Antonio_star_01'
	
	img = 'new-image.fits'
	
	hdu = pyfits.getheader(os.path.join(path,img))

	print hdu['NAXIS1'],hdu['NAXIS2']

	# read first as reference table
	mag0 = Table.read(args[1],format='ascii.daophot')
	
	nstar = len(mag0)
	xpos = np.zeros(nstar*(len(args)-1)).reshape(nstar,len(args)-1)
	ypos = np.zeros(nstar*(len(args)-1)).reshape(nstar,len(args)-1)
	expos = np.zeros(nstar*(len(args)-1)).reshape(nstar,len(args)-1)
	eypos = np.zeros(nstar*(len(args)-1)).reshape(nstar,len(args)-1)
	
	logging.info('Processing %i files with %i sources ...'%(len(args)-1,nstar))
	
	for ifile,mfile in enumerate(args[1:]):
		
		logging.debug('Reading %s ...'%mfile)
		
		mag0 = Table.read(mfile,format='ascii.daophot')

		for istar in range(len(mag0)):
			
			#xpos[istar][ifile] = mag0['XCENTER'][istar]
			#ypos[istar][ifile] = mag0['YCENTER'][istar]
			xp = mag0['XCENTER'][istar]-hdu['CRPIX1']
			yp = mag0['YCENTER'][istar]-hdu['CRPIX2']
			xpos[istar][ifile] = mag0['XCENTER'][istar]#-(hdu['A_0_2']*yp**2.+hdu['A_1_1']*xp*yp+hdu['A_2_0']*xp**2.)
			ypos[istar][ifile] = mag0['YCENTER'][istar]#-(hdu['B_0_2']*xp**2.+hdu['B_1_1']*xp*yp+hdu['B_2_0']*yp**2.)
			#print xp,yp,'->',xpos[istar][ifile],ypos[istar][ifile]

			expos[istar][ifile] = mag0['XERR'][istar]
			eypos[istar][ifile] = mag0['YERR'][istar]

	logging.info('Plotting...')
	'''
	py.subplot(311)
	py.plot(xpos[50],'.')
	py.subplot(312)
	py.plot(ypos[50],'.')
	py.subplot(313)
	py.plot(xpos[50],ypos[50],'.')
	'''
	
	xposT = xpos.T
	yposT = ypos.T

	xavg = np.zeros(len(xposT))
	yavg = np.zeros(len(xposT))

	for i in range(len(xposT)):
		xavg[i]=np.mean(xposT[i])
		yavg[i]=np.mean(yposT[i])


	#py.plot(xavg-xavg[0],
	#		yavg-yavg[0],
	#		'r-')

	xmin,xmax = 0,hdu['NAXIS1']
	ymin,ymax = 0,hdu['NAXIS2']

	xquad = [ [xmin,xmax/5] , [xmax/5,2*xmax/5] ,
			  [2*xmax/5,3*xmax/5] , [3*xmax/5, 4*xmax/5] ,
			  [4*xmax/5,ymax] ]
	yquad = [ [ymin,ymax/5] , [ymax/5,2*ymax/5] ,
			  [2*ymax/5,3*ymax/5] , [3*ymax/5, 4*ymax/5] ,
			  [4*ymax/5,ymax]]
	nqstar = np.zeros(len(xquad)*len(yquad))

	NQstar = np.zeros(len(xquad)*len(yquad)).reshape(len(yquad),len(xquad))

	#print xquad
	#print yquad

	color = np.logspace(-2,-0.01,nstar)[::-1]
	'''
	for quad in range(4):
		xmask = np.bitwise_and(xpos > xquad[quad][0], xpos < xquad[quad][1])
		ymask = np.bitwise_and(ypos > yquad[quad][0], ypos < yquad[quad][1])
		mask = np.bitwise_and(xmask,ymask)
		
		py.subplot(2,2,quad+1)
	'''
	axes = np.array([])
	for nplot in range((len(xquad))*(len(yquad))):
		axes = np.append(axes, py.subplot(len(xquad),len(yquad),nplot+1))
		py.setp(axes[nplot].get_yticklabels(),visible=False)
		py.setp(axes[nplot].get_xticklabels(),visible=False)
		axes[nplot].set_xlim(-0.5,0.5)
		axes[nplot].set_ylim(-0.5,0.5)

	if opt.output:
		logging.info('Saving %s ...'%(opt.output))
		np.savetxt(opt.output,
				   X=zip((xpos[nstar/2]-xpos[nstar/2][0])*0.75,
						 (ypos[nstar/2]-ypos[nstar/2][0])*0.75),
				   fmt = '%10.5f %10.5f')

	for istar in np.arange(nstar):
		x_quad,y_quad = 0,0
		#xq_masq = xquad >= xpos[istar][0]
		#yq_masq = yquad >= ypos[istar][0]
		
		for ix in range(len(xquad)):
			if xquad[ix][0] <= xpos[istar][0] < xquad[ix][1]:
				x_quad = ix
				break

		for iy in range(len(yquad)):
			if yquad[iy][0] <= ypos[istar][0] < yquad[iy][1]:
				y_quad = iy
				break

		nplot = (x_quad)*len(xquad)+y_quad

		NQstar[x_quad][y_quad] += 1
		#py.subplot(len(xquad)/2,len(yquad)/2,nplot)


		#if nqstar[nplot] == 0:
		axes[nplot].errorbar(xpos[istar]-xavg-xpos[istar][0]+xavg[0],
				 ypos[istar]-yavg-ypos[istar][0]+yavg[0],
				 eypos[istar],
				 expos[istar],
				 fmt='.')
	
		#	nqstar[nplot]+=1

	py.subplots_adjust(wspace=0,hspace=0)

	py.figure(2)
	

	
	py.plot((xpos[nstar/2]-xpos[nstar/2][0])*0.75,
			(ypos[nstar/2]-ypos[nstar/2][0])*0.75,'o-')


	py.figure(3)
	
	py.imshow(NQstar,interpolation='nearest',origin='lower')

	py.show()

################################################################################

if __name__ == '__main__':

	main(sys.argv)

################################################################################